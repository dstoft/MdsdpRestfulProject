/*
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.restful.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RestControllerGenerationGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class EntityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.EntityModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//EntityModel:
		//	"model" name=ID declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }
		
		//"model" name=ID declarations+=Declaration*
		public Group getGroup() { return cGroup; }
		
		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0() { return cDeclarationsDeclarationParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cControllerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExternalDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Declaration:
		//	Type | Entity | Controller | ExternalDef;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | Entity | Controller | ExternalDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }
		
		//Controller
		public RuleCall getControllerParserRuleCall_2() { return cControllerParserRuleCall_2; }
		
		//ExternalDef
		public RuleCall getExternalDefParserRuleCall_3() { return cExternalDefParserRuleCall_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Type:
		//	'type' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ID
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExternalDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.ExternalDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAttributeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ExternalDef:
		//	"external" name=ID type=AttributeType;
		@Override public ParserRule getRule() { return rule; }
		
		//"external" name=ID type=AttributeType
		public Group getGroup() { return cGroup; }
		
		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_2_0() { return cTypeAttributeTypeParserRuleCall_2_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBaseEntityCrossReference_2_1_0 = (CrossReference)cBaseAssignment_2_1.eContents().get(0);
		private final RuleCall cBaseEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBaseEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsEntityDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	'entity' name=ID (':' base=[Entity])? '{' declarations+=EntityDeclaration* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID (':' base=[Entity])? '{' declarations+=EntityDeclaration* '}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' base=[Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//base=[Entity]
		public Assignment getBaseAssignment_2_1() { return cBaseAssignment_2_1; }
		
		//[Entity]
		public CrossReference getBaseEntityCrossReference_2_1_0() { return cBaseEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBaseEntityIDTerminalRuleCall_2_1_0_1() { return cBaseEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//declarations+=EntityDeclaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }
		
		//EntityDeclaration
		public RuleCall getDeclarationsEntityDeclarationParserRuleCall_4_0() { return cDeclarationsEntityDeclarationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EntityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.EntityDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequirementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityDeclaration:
		//	Attribute | Requirement;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Requirement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Requirement
		public RuleCall getRequirementParserRuleCall_1() { return cRequirementParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRequiresKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRequiresAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cRequiresAlternatives_2_1_0 = (Alternatives)cRequiresAssignment_2_1.eContents().get(0);
		private final RuleCall cRequiresLogicRequirementParserRuleCall_2_1_0_0 = (RuleCall)cRequiresAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cRequiresExternalUseParserRuleCall_2_1_0_1 = (RuleCall)cRequiresAlternatives_2_1_0.eContents().get(1);
		
		//Attribute:
		//	name=ID type=AttributeType ("requires" requires=(LogicRequirement | ExternalUse))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID type=AttributeType ("requires" requires=(LogicRequirement | ExternalUse))?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_1_0() { return cTypeAttributeTypeParserRuleCall_1_0; }
		
		//("requires" requires=(LogicRequirement | ExternalUse))?
		public Group getGroup_2() { return cGroup_2; }
		
		//"requires"
		public Keyword getRequiresKeyword_2_0() { return cRequiresKeyword_2_0; }
		
		//requires=(LogicRequirement | ExternalUse)
		public Assignment getRequiresAssignment_2_1() { return cRequiresAssignment_2_1; }
		
		//(LogicRequirement | ExternalUse)
		public Alternatives getRequiresAlternatives_2_1_0() { return cRequiresAlternatives_2_1_0; }
		
		//LogicRequirement
		public RuleCall getRequiresLogicRequirementParserRuleCall_2_1_0_0() { return cRequiresLogicRequirementParserRuleCall_2_1_0_0; }
		
		//ExternalUse
		public RuleCall getRequiresExternalUseParserRuleCall_2_1_0_1() { return cRequiresExternalUseParserRuleCall_2_1_0_1; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSimpleTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cUsingKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_0_2_0 = (CrossReference)cTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_2_0_1 = (RuleCall)cTypeTypeCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRefTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReferenceKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTypeEntityCrossReference_1_2_0 = (CrossReference)cTypeAssignment_1_2.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTypeEntityCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cListTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cListKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cTypeEntityCrossReference_2_2_0 = (CrossReference)cTypeAssignment_2_2.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_2_2_0_1 = (RuleCall)cTypeEntityCrossReference_2_2_0.eContents().get(1);
		
		//AttributeType:
		//	{SimpleType} 'using' type=[Type] | {RefType} "reference" type=[Entity] | {ListType} "list" type=[Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleType} 'using' type=[Type] | {RefType} "reference" type=[Entity] | {ListType} "list" type=[Entity]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SimpleType} 'using' type=[Type]
		public Group getGroup_0() { return cGroup_0; }
		
		//{SimpleType}
		public Action getSimpleTypeAction_0_0() { return cSimpleTypeAction_0_0; }
		
		//'using'
		public Keyword getUsingKeyword_0_1() { return cUsingKeyword_0_1; }
		
		//type=[Type]
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }
		
		//[Type]
		public CrossReference getTypeTypeCrossReference_0_2_0() { return cTypeTypeCrossReference_0_2_0; }
		
		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_2_0_1() { return cTypeTypeIDTerminalRuleCall_0_2_0_1; }
		
		//{RefType} "reference" type=[Entity]
		public Group getGroup_1() { return cGroup_1; }
		
		//{RefType}
		public Action getRefTypeAction_1_0() { return cRefTypeAction_1_0; }
		
		//"reference"
		public Keyword getReferenceKeyword_1_1() { return cReferenceKeyword_1_1; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_1_2_0() { return cTypeEntityCrossReference_1_2_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_1_2_0_1() { return cTypeEntityIDTerminalRuleCall_1_2_0_1; }
		
		//{ListType} "list" type=[Entity]
		public Group getGroup_2() { return cGroup_2; }
		
		//{ListType}
		public Action getListTypeAction_2_0() { return cListTypeAction_2_0; }
		
		//"list"
		public Keyword getListKeyword_2_1() { return cListKeyword_2_1; }
		
		//type=[Entity]
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }
		
		//[Entity]
		public CrossReference getTypeEntityCrossReference_2_2_0() { return cTypeEntityCrossReference_2_2_0; }
		
		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_2_2_0_1() { return cTypeEntityIDTerminalRuleCall_2_2_0_1; }
	}
	public class LogicRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.LogicRequirement");
		private final Assignment cLogicAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLogicLogicExpParserRuleCall_0 = (RuleCall)cLogicAssignment.eContents().get(0);
		
		//LogicRequirement:
		//	logic=LogicExp;
		@Override public ParserRule getRule() { return rule; }
		
		//logic=LogicExp
		public Assignment getLogicAssignment() { return cLogicAssignment; }
		
		//LogicExp
		public RuleCall getLogicLogicExpParserRuleCall_0() { return cLogicLogicExpParserRuleCall_0; }
	}
	public class ExternalUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.ExternalUse");
		private final Assignment cExternalAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cExternalExternalDefCrossReference_0 = (CrossReference)cExternalAssignment.eContents().get(0);
		private final RuleCall cExternalExternalDefIDTerminalRuleCall_0_1 = (RuleCall)cExternalExternalDefCrossReference_0.eContents().get(1);
		
		//ExternalUse:
		//	external=[ExternalDef];
		@Override public ParserRule getRule() { return rule; }
		
		//external=[ExternalDef]
		public Assignment getExternalAssignment() { return cExternalAssignment; }
		
		//[ExternalDef]
		public CrossReference getExternalExternalDefCrossReference_0() { return cExternalExternalDefCrossReference_0; }
		
		//ID
		public RuleCall getExternalExternalDefIDTerminalRuleCall_0_1() { return cExternalExternalDefIDTerminalRuleCall_0_1; }
	}
	public class AttributeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.AttributeUse");
		private final Assignment cAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_0 = (CrossReference)cAttributeAssignment.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_1 = (RuleCall)cAttributeAttributeCrossReference_0.eContents().get(1);
		
		//AttributeUse:
		//	attribute=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment() { return cAttributeAssignment; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0() { return cAttributeAttributeCrossReference_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_1; }
	}
	public class ExternalUseOfAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.ExternalUseOfAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExternalExternalDefCrossReference_0_0 = (CrossReference)cExternalAssignment_0.eContents().get(0);
		private final RuleCall cExternalExternalDefIDTerminalRuleCall_0_0_1 = (RuleCall)cExternalExternalDefCrossReference_0_0.eContents().get(1);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAttributeAlternatives_2_0 = (Alternatives)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeUseParserRuleCall_2_0_0 = (RuleCall)cAttributeAlternatives_2_0.eContents().get(0);
		private final RuleCall cAttributeReferenceParserRuleCall_2_0_1 = (RuleCall)cAttributeAlternatives_2_0.eContents().get(1);
		
		//ExternalUseOfAttribute:
		//	external=[ExternalDef] "of" attribute=(AttributeUse | Reference);
		@Override public ParserRule getRule() { return rule; }
		
		//external=[ExternalDef] "of" attribute=(AttributeUse | Reference)
		public Group getGroup() { return cGroup; }
		
		//external=[ExternalDef]
		public Assignment getExternalAssignment_0() { return cExternalAssignment_0; }
		
		//[ExternalDef]
		public CrossReference getExternalExternalDefCrossReference_0_0() { return cExternalExternalDefCrossReference_0_0; }
		
		//ID
		public RuleCall getExternalExternalDefIDTerminalRuleCall_0_0_1() { return cExternalExternalDefIDTerminalRuleCall_0_0_1; }
		
		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }
		
		//attribute=(AttributeUse | Reference)
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//(AttributeUse | Reference)
		public Alternatives getAttributeAlternatives_2_0() { return cAttributeAlternatives_2_0; }
		
		//AttributeUse
		public RuleCall getAttributeAttributeUseParserRuleCall_2_0_0() { return cAttributeAttributeUseParserRuleCall_2_0_0; }
		
		//Reference
		public RuleCall getAttributeReferenceParserRuleCall_2_0_1() { return cAttributeReferenceParserRuleCall_2_0_1; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequirementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRequirementAlternatives_1_0 = (Alternatives)cRequirementAssignment_1.eContents().get(0);
		private final RuleCall cRequirementLogicRequirementParserRuleCall_1_0_0 = (RuleCall)cRequirementAlternatives_1_0.eContents().get(0);
		private final RuleCall cRequirementExternalUseOfAttributeParserRuleCall_1_0_1 = (RuleCall)cRequirementAlternatives_1_0.eContents().get(1);
		
		//Requirement:
		//	"require" requirement=(LogicRequirement | ExternalUseOfAttribute);
		@Override public ParserRule getRule() { return rule; }
		
		//"require" requirement=(LogicRequirement | ExternalUseOfAttribute)
		public Group getGroup() { return cGroup; }
		
		//"require"
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }
		
		//requirement=(LogicRequirement | ExternalUseOfAttribute)
		public Assignment getRequirementAssignment_1() { return cRequirementAssignment_1; }
		
		//(LogicRequirement | ExternalUseOfAttribute)
		public Alternatives getRequirementAlternatives_1_0() { return cRequirementAlternatives_1_0; }
		
		//LogicRequirement
		public RuleCall getRequirementLogicRequirementParserRuleCall_1_0_0() { return cRequirementLogicRequirementParserRuleCall_1_0_0; }
		
		//ExternalUseOfAttribute
		public RuleCall getRequirementExternalUseOfAttributeParserRuleCall_1_0_1() { return cRequirementExternalUseOfAttributeParserRuleCall_1_0_1; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.LogicExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjunctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cDisjunctionLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjunctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicExp Proposition:
		//	Conjunction ('||' {Disjunction.left=current} right=Conjunction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Conjunction ('||' {Disjunction.left=current} right=Conjunction)*
		public Group getGroup() { return cGroup; }
		
		//Conjunction
		public RuleCall getConjunctionParserRuleCall_0() { return cConjunctionParserRuleCall_0; }
		
		//('||' {Disjunction.left=current} right=Conjunction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//{Disjunction.left=current}
		public Action getDisjunctionLeftAction_1_1() { return cDisjunctionLeftAction_1_1; }
		
		//right=Conjunction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Conjunction
		public RuleCall getRightConjunctionParserRuleCall_1_2_0() { return cRightConjunctionParserRuleCall_1_2_0; }
	}
	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cConjunctionLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjunction Proposition:
		//	Comparison ('&&' {Conjunction.left=current} right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ('&&' {Conjunction.left=current} right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//('&&' {Conjunction.left=current} right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//{Conjunction.left=current}
		public Action getConjunctionLeftAction_1_1() { return cConjunctionLeftAction_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison:
		//	left=Exp op=RelationalOp right=Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//left=Exp op=RelationalOp right=Exp
		public Group getGroup() { return cGroup; }
		
		//left=Exp
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Exp
		public RuleCall getLeftExpParserRuleCall_0_0() { return cLeftExpParserRuleCall_0_0; }
		
		//op=RelationalOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0() { return cOpRelationalOpParserRuleCall_1_0; }
		
		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}
	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRelEQAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRelLTAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRelGTAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRelLTEAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRelGTEAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//RelationalOp:
		//	{RelEQ} '=' | {RelLT} '<' | {RelGT} '>' | {RelLTE} '<=' | {RelGTE} '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//{RelEQ} '=' | {RelLT} '<' | {RelGT} '>' | {RelLTE} '<=' | {RelGTE} '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RelEQ} '='
		public Group getGroup_0() { return cGroup_0; }
		
		//{RelEQ}
		public Action getRelEQAction_0_0() { return cRelEQAction_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//{RelLT} '<'
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelLT}
		public Action getRelLTAction_1_0() { return cRelLTAction_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
		
		//{RelGT} '>'
		public Group getGroup_2() { return cGroup_2; }
		
		//{RelGT}
		public Action getRelGTAction_2_0() { return cRelGTAction_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_1() { return cGreaterThanSignKeyword_2_1; }
		
		//{RelLTE} '<='
		public Group getGroup_3() { return cGroup_3; }
		
		//{RelLTE}
		public Action getRelLTEAction_3_0() { return cRelLTEAction_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3_1() { return cLessThanSignEqualsSignKeyword_3_1; }
		
		//{RelGTE} '>='
		public Group getGroup_4() { return cGroup_4; }
		
		//{RelGTE}
		public Action getRelGTEAction_4_0() { return cRelGTEAction_4_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4_1() { return cGreaterThanSignEqualsSignKeyword_4_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cAddLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cSubLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightFactorParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Exp Expression:
		//	Factor (('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Factor (('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*
		public Group getGroup() { return cGroup; }
		
		//Factor
		public RuleCall getFactorParserRuleCall_0() { return cFactorParserRuleCall_0; }
		
		//(('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Add.left=current} | '-' {Sub.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Add.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Add.left=current}
		public Action getAddLeftAction_1_0_0_1() { return cAddLeftAction_1_0_0_1; }
		
		//'-' {Sub.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Sub.left=current}
		public Action getSubLeftAction_1_0_1_1() { return cSubLeftAction_1_0_1_1; }
		
		//right=Factor
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Factor
		public RuleCall getRightFactorParserRuleCall_1_1_0() { return cRightFactorParserRuleCall_1_1_0; }
	}
	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimitiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimitiveParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Factor Expression:
		//	Primitive (('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primitive (('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*
		public Group getGroup() { return cGroup; }
		
		//Primitive
		public RuleCall getPrimitiveParserRuleCall_0() { return cPrimitiveParserRuleCall_0; }
		
		//(('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Mul.left=current} | '/' {Div.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Mul.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_1() { return cMulLeftAction_1_0_0_1; }
		
		//'/' {Div.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_1() { return cDivLeftAction_1_0_1_1; }
		
		//right=Primitive
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primitive
		public RuleCall getRightPrimitiveParserRuleCall_1_1_0() { return cRightPrimitiveParserRuleCall_1_1_0; }
	}
	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primitive Expression:
		//	Name | Reference | IntExp | '(' Exp ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Name | Reference | IntExp | '(' Exp ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
		
		//IntExp
		public RuleCall getIntExpParserRuleCall_2() { return cIntExpParserRuleCall_2; }
		
		//'(' Exp ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_3_1() { return cExpParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Name");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarNameAttributeCrossReference_0 = (CrossReference)cVarNameAssignment.eContents().get(0);
		private final RuleCall cVarNameAttributeIDTerminalRuleCall_0_1 = (RuleCall)cVarNameAttributeCrossReference_0.eContents().get(1);
		
		//Name:
		//	varName=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//varName=[Attribute]
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }
		
		//[Attribute]
		public CrossReference getVarNameAttributeCrossReference_0() { return cVarNameAttributeCrossReference_0; }
		
		//ID
		public RuleCall getVarNameAttributeIDTerminalRuleCall_0_1() { return cVarNameAttributeIDTerminalRuleCall_0_1; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferenceAttributeCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		
		//Reference:
		//	reference=[Attribute] "." attribute=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[Attribute] "." attribute=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//reference=[Attribute]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//[Attribute]
		public CrossReference getReferenceAttributeCrossReference_0_0() { return cReferenceAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getReferenceAttributeIDTerminalRuleCall_0_0_1() { return cReferenceAttributeIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }
	}
	public class IntExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.IntExp");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntExp:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cUsesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodsMethodDefParserRuleCall_5_0 = (RuleCall)cMethodsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Controller:
		//	'controller' name=ID "uses" entity=[Entity] '{' methods+=MethodDef* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' name=ID "uses" entity=[Entity] '{' methods+=MethodDef* '}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"uses"
		public Keyword getUsesKeyword_2() { return cUsesKeyword_2; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//methods+=MethodDef*
		public Assignment getMethodsAssignment_5() { return cMethodsAssignment_5; }
		
		//MethodDef
		public RuleCall getMethodsMethodDefParserRuleCall_5_0() { return cMethodsMethodDefParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class MethodDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.MethodDef");
		private final RuleCall cMethodTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodDef ControllerMethod:
		//	MethodType;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodType
		public RuleCall getMethodTypeParserRuleCall() { return cMethodTypeParserRuleCall; }
	}
	public class MethodTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.MethodType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateMethodParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListMethodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUpdateMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteMethodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MethodType ControllerMethod:
		//	CreateMethod | GetMethod | ListMethod | UpdateMethod | DeleteMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateMethod | GetMethod | ListMethod | UpdateMethod | DeleteMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateMethod
		public RuleCall getCreateMethodParserRuleCall_0() { return cCreateMethodParserRuleCall_0; }
		
		//GetMethod
		public RuleCall getGetMethodParserRuleCall_1() { return cGetMethodParserRuleCall_1; }
		
		//ListMethod
		public RuleCall getListMethodParserRuleCall_2() { return cListMethodParserRuleCall_2; }
		
		//UpdateMethod
		public RuleCall getUpdateMethodParserRuleCall_3() { return cUpdateMethodParserRuleCall_3; }
		
		//DeleteMethod
		public RuleCall getDeleteMethodParserRuleCall_4() { return cDeleteMethodParserRuleCall_4; }
	}
	public class CreateMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.CreateMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCREATEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWithEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWithEntityCreateMethodWithParserRuleCall_2_0 = (RuleCall)cWithEntityAssignment_2.eContents().get(0);
		private final Assignment cExcludeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExcludeCreateMethodExcludeParserRuleCall_3_0 = (RuleCall)cExcludeAssignment_3.eContents().get(0);
		
		//CreateMethod:
		//	{CreateMethod} "CREATE" withEntity+=CreateMethodWith* exclude=CreateMethodExclude?;
		@Override public ParserRule getRule() { return rule; }
		
		//{CreateMethod} "CREATE" withEntity+=CreateMethodWith* exclude=CreateMethodExclude?
		public Group getGroup() { return cGroup; }
		
		//{CreateMethod}
		public Action getCreateMethodAction_0() { return cCreateMethodAction_0; }
		
		//"CREATE"
		public Keyword getCREATEKeyword_1() { return cCREATEKeyword_1; }
		
		//withEntity+=CreateMethodWith*
		public Assignment getWithEntityAssignment_2() { return cWithEntityAssignment_2; }
		
		//CreateMethodWith
		public RuleCall getWithEntityCreateMethodWithParserRuleCall_2_0() { return cWithEntityCreateMethodWithParserRuleCall_2_0; }
		
		//exclude=CreateMethodExclude?
		public Assignment getExcludeAssignment_3() { return cExcludeAssignment_3; }
		
		//CreateMethodExclude
		public RuleCall getExcludeCreateMethodExcludeParserRuleCall_3_0() { return cExcludeCreateMethodExcludeParserRuleCall_3_0; }
	}
	public class CreateMethodWithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.CreateMethodWith");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceReferenceParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//CreateMethodWith:
		//	"with" reference=Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//"with" reference=Reference
		public Group getGroup() { return cGroup; }
		
		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//reference=Reference
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_1_0() { return cReferenceReferenceParserRuleCall_1_0; }
	}
	public class CreateMethodExcludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.CreateMethodExclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExcludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAttributesAttributeCrossReference_1_0 = (CrossReference)cAttributesAssignment_1.eContents().get(0);
		private final RuleCall cAttributesAttributeIDTerminalRuleCall_1_0_1 = (RuleCall)cAttributesAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cAttributesAttributeCrossReference_2_1_0 = (CrossReference)cAttributesAssignment_2_1.eContents().get(0);
		private final RuleCall cAttributesAttributeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cAttributesAttributeCrossReference_2_1_0.eContents().get(1);
		
		//CreateMethodExclude:
		//	"exclude" attributes+=[Attribute] ("," attributes+=[Attribute])*;
		@Override public ParserRule getRule() { return rule; }
		
		//"exclude" attributes+=[Attribute] ("," attributes+=[Attribute])*
		public Group getGroup() { return cGroup; }
		
		//"exclude"
		public Keyword getExcludeKeyword_0() { return cExcludeKeyword_0; }
		
		//attributes+=[Attribute]
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }
		
		//[Attribute]
		public CrossReference getAttributesAttributeCrossReference_1_0() { return cAttributesAttributeCrossReference_1_0; }
		
		//ID
		public RuleCall getAttributesAttributeIDTerminalRuleCall_1_0_1() { return cAttributesAttributeIDTerminalRuleCall_1_0_1; }
		
		//("," attributes+=[Attribute])*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//attributes+=[Attribute]
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//[Attribute]
		public CrossReference getAttributesAttributeCrossReference_2_1_0() { return cAttributesAttributeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getAttributesAttributeIDTerminalRuleCall_2_1_0_1() { return cAttributesAttributeIDTerminalRuleCall_2_1_0_1; }
	}
	public class GetMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.GetMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityIdAttributeCrossReference_2_0 = (CrossReference)cEntityIdAssignment_2.eContents().get(0);
		private final RuleCall cEntityIdAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityIdAttributeCrossReference_2_0.eContents().get(1);
		
		//GetMethod:
		//	"GET" "on" entityId=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//"GET" "on" entityId=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//"GET"
		public Keyword getGETKeyword_0() { return cGETKeyword_0; }
		
		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//entityId=[Attribute]
		public Assignment getEntityIdAssignment_2() { return cEntityIdAssignment_2; }
		
		//[Attribute]
		public CrossReference getEntityIdAttributeCrossReference_2_0() { return cEntityIdAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityIdAttributeIDTerminalRuleCall_2_0_1() { return cEntityIdAttributeIDTerminalRuleCall_2_0_1; }
	}
	public class ListMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.ListMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLISTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ListMethod:
		//	{ListMethod} "LIST";
		@Override public ParserRule getRule() { return rule; }
		
		//{ListMethod} "LIST"
		public Group getGroup() { return cGroup; }
		
		//{ListMethod}
		public Action getListMethodAction_0() { return cListMethodAction_0; }
		
		//"LIST"
		public Keyword getLISTKeyword_1() { return cLISTKeyword_1; }
	}
	public class UpdateMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.UpdateMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPDATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityIdAttributeCrossReference_2_0 = (CrossReference)cEntityIdAssignment_2.eContents().get(0);
		private final RuleCall cEntityIdAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityIdAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAttributesAttributeCrossReference_4_0 = (CrossReference)cAttributesAssignment_4.eContents().get(0);
		private final RuleCall cAttributesAttributeIDTerminalRuleCall_4_0_1 = (RuleCall)cAttributesAttributeCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cAttributesAttributeCrossReference_5_1_0 = (CrossReference)cAttributesAssignment_5_1.eContents().get(0);
		private final RuleCall cAttributesAttributeIDTerminalRuleCall_5_1_0_1 = (RuleCall)cAttributesAttributeCrossReference_5_1_0.eContents().get(1);
		
		//UpdateMethod:
		//	"UPDATE" "on" entityId=[Attribute] "with" attributes+=[Attribute] ("," attributes+=[Attribute])*;
		@Override public ParserRule getRule() { return rule; }
		
		//"UPDATE" "on" entityId=[Attribute] "with" attributes+=[Attribute] ("," attributes+=[Attribute])*
		public Group getGroup() { return cGroup; }
		
		//"UPDATE"
		public Keyword getUPDATEKeyword_0() { return cUPDATEKeyword_0; }
		
		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//entityId=[Attribute]
		public Assignment getEntityIdAssignment_2() { return cEntityIdAssignment_2; }
		
		//[Attribute]
		public CrossReference getEntityIdAttributeCrossReference_2_0() { return cEntityIdAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityIdAttributeIDTerminalRuleCall_2_0_1() { return cEntityIdAttributeIDTerminalRuleCall_2_0_1; }
		
		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }
		
		//attributes+=[Attribute]
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//[Attribute]
		public CrossReference getAttributesAttributeCrossReference_4_0() { return cAttributesAttributeCrossReference_4_0; }
		
		//ID
		public RuleCall getAttributesAttributeIDTerminalRuleCall_4_0_1() { return cAttributesAttributeIDTerminalRuleCall_4_0_1; }
		
		//("," attributes+=[Attribute])*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=[Attribute]
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//[Attribute]
		public CrossReference getAttributesAttributeCrossReference_5_1_0() { return cAttributesAttributeCrossReference_5_1_0; }
		
		//ID
		public RuleCall getAttributesAttributeIDTerminalRuleCall_5_1_0_1() { return cAttributesAttributeIDTerminalRuleCall_5_1_0_1; }
	}
	public class DeleteMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sdu.mdsd.restful.RestControllerGeneration.DeleteMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEntityIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEntityIdAttributeCrossReference_2_0 = (CrossReference)cEntityIdAssignment_2.eContents().get(0);
		private final RuleCall cEntityIdAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cEntityIdAttributeCrossReference_2_0.eContents().get(1);
		
		//DeleteMethod:
		//	"DELETE" "on" entityId=[Attribute];
		@Override public ParserRule getRule() { return rule; }
		
		//"DELETE" "on" entityId=[Attribute]
		public Group getGroup() { return cGroup; }
		
		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }
		
		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//entityId=[Attribute]
		public Assignment getEntityIdAssignment_2() { return cEntityIdAssignment_2; }
		
		//[Attribute]
		public CrossReference getEntityIdAttributeCrossReference_2_0() { return cEntityIdAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getEntityIdAttributeIDTerminalRuleCall_2_0_1() { return cEntityIdAttributeIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final EntityModelElements pEntityModel;
	private final DeclarationElements pDeclaration;
	private final TypeElements pType;
	private final ExternalDefElements pExternalDef;
	private final EntityElements pEntity;
	private final EntityDeclarationElements pEntityDeclaration;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final LogicRequirementElements pLogicRequirement;
	private final ExternalUseElements pExternalUse;
	private final AttributeUseElements pAttributeUse;
	private final ExternalUseOfAttributeElements pExternalUseOfAttribute;
	private final RequirementElements pRequirement;
	private final LogicExpElements pLogicExp;
	private final ConjunctionElements pConjunction;
	private final ComparisonElements pComparison;
	private final RelationalOpElements pRelationalOp;
	private final ExpElements pExp;
	private final FactorElements pFactor;
	private final PrimitiveElements pPrimitive;
	private final NameElements pName;
	private final ReferenceElements pReference;
	private final IntExpElements pIntExp;
	private final ControllerElements pController;
	private final MethodDefElements pMethodDef;
	private final MethodTypeElements pMethodType;
	private final CreateMethodElements pCreateMethod;
	private final CreateMethodWithElements pCreateMethodWith;
	private final CreateMethodExcludeElements pCreateMethodExclude;
	private final GetMethodElements pGetMethod;
	private final ListMethodElements pListMethod;
	private final UpdateMethodElements pUpdateMethod;
	private final DeleteMethodElements pDeleteMethod;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RestControllerGenerationGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEntityModel = new EntityModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pType = new TypeElements();
		this.pExternalDef = new ExternalDefElements();
		this.pEntity = new EntityElements();
		this.pEntityDeclaration = new EntityDeclarationElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pLogicRequirement = new LogicRequirementElements();
		this.pExternalUse = new ExternalUseElements();
		this.pAttributeUse = new AttributeUseElements();
		this.pExternalUseOfAttribute = new ExternalUseOfAttributeElements();
		this.pRequirement = new RequirementElements();
		this.pLogicExp = new LogicExpElements();
		this.pConjunction = new ConjunctionElements();
		this.pComparison = new ComparisonElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pExp = new ExpElements();
		this.pFactor = new FactorElements();
		this.pPrimitive = new PrimitiveElements();
		this.pName = new NameElements();
		this.pReference = new ReferenceElements();
		this.pIntExp = new IntExpElements();
		this.pController = new ControllerElements();
		this.pMethodDef = new MethodDefElements();
		this.pMethodType = new MethodTypeElements();
		this.pCreateMethod = new CreateMethodElements();
		this.pCreateMethodWith = new CreateMethodWithElements();
		this.pCreateMethodExclude = new CreateMethodExcludeElements();
		this.pGetMethod = new GetMethodElements();
		this.pListMethod = new ListMethodElements();
		this.pUpdateMethod = new UpdateMethodElements();
		this.pDeleteMethod = new DeleteMethodElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sdu.mdsd.restful.RestControllerGeneration".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EntityModel:
	//	"model" name=ID declarations+=Declaration*;
	public EntityModelElements getEntityModelAccess() {
		return pEntityModel;
	}
	
	public ParserRule getEntityModelRule() {
		return getEntityModelAccess().getRule();
	}
	
	//Declaration:
	//	Type | Entity | Controller | ExternalDef;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Type:
	//	'type' name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//ExternalDef:
	//	"external" name=ID type=AttributeType;
	public ExternalDefElements getExternalDefAccess() {
		return pExternalDef;
	}
	
	public ParserRule getExternalDefRule() {
		return getExternalDefAccess().getRule();
	}
	
	//Entity:
	//	'entity' name=ID (':' base=[Entity])? '{' declarations+=EntityDeclaration* '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EntityDeclaration:
	//	Attribute | Requirement;
	public EntityDeclarationElements getEntityDeclarationAccess() {
		return pEntityDeclaration;
	}
	
	public ParserRule getEntityDeclarationRule() {
		return getEntityDeclarationAccess().getRule();
	}
	
	//Attribute:
	//	name=ID type=AttributeType ("requires" requires=(LogicRequirement | ExternalUse))?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttributeType:
	//	{SimpleType} 'using' type=[Type] | {RefType} "reference" type=[Entity] | {ListType} "list" type=[Entity];
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//LogicRequirement:
	//	logic=LogicExp;
	public LogicRequirementElements getLogicRequirementAccess() {
		return pLogicRequirement;
	}
	
	public ParserRule getLogicRequirementRule() {
		return getLogicRequirementAccess().getRule();
	}
	
	//ExternalUse:
	//	external=[ExternalDef];
	public ExternalUseElements getExternalUseAccess() {
		return pExternalUse;
	}
	
	public ParserRule getExternalUseRule() {
		return getExternalUseAccess().getRule();
	}
	
	//AttributeUse:
	//	attribute=[Attribute];
	public AttributeUseElements getAttributeUseAccess() {
		return pAttributeUse;
	}
	
	public ParserRule getAttributeUseRule() {
		return getAttributeUseAccess().getRule();
	}
	
	//ExternalUseOfAttribute:
	//	external=[ExternalDef] "of" attribute=(AttributeUse | Reference);
	public ExternalUseOfAttributeElements getExternalUseOfAttributeAccess() {
		return pExternalUseOfAttribute;
	}
	
	public ParserRule getExternalUseOfAttributeRule() {
		return getExternalUseOfAttributeAccess().getRule();
	}
	
	//Requirement:
	//	"require" requirement=(LogicRequirement | ExternalUseOfAttribute);
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//LogicExp Proposition:
	//	Conjunction ('||' {Disjunction.left=current} right=Conjunction)*;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//Conjunction Proposition:
	//	Comparison ('&&' {Conjunction.left=current} right=Comparison)*;
	public ConjunctionElements getConjunctionAccess() {
		return pConjunction;
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}
	
	//Comparison:
	//	left=Exp op=RelationalOp right=Exp;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//RelationalOp:
	//	{RelEQ} '=' | {RelLT} '<' | {RelGT} '>' | {RelLTE} '<=' | {RelGTE} '>=';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}
	
	//Exp Expression:
	//	Factor (('+' {Add.left=current} | '-' {Sub.left=current}) right=Factor)*;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//Factor Expression:
	//	Primitive (('*' {Mul.left=current} | '/' {Div.left=current}) right=Primitive)*;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}
	
	//Primitive Expression:
	//	Name | Reference | IntExp | '(' Exp ')';
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}
	
	//Name:
	//	varName=[Attribute];
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Reference:
	//	reference=[Attribute] "." attribute=[Attribute];
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//IntExp:
	//	value=INT;
	public IntExpElements getIntExpAccess() {
		return pIntExp;
	}
	
	public ParserRule getIntExpRule() {
		return getIntExpAccess().getRule();
	}
	
	//Controller:
	//	'controller' name=ID "uses" entity=[Entity] '{' methods+=MethodDef* '}';
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//MethodDef ControllerMethod:
	//	MethodType;
	public MethodDefElements getMethodDefAccess() {
		return pMethodDef;
	}
	
	public ParserRule getMethodDefRule() {
		return getMethodDefAccess().getRule();
	}
	
	//MethodType ControllerMethod:
	//	CreateMethod | GetMethod | ListMethod | UpdateMethod | DeleteMethod;
	public MethodTypeElements getMethodTypeAccess() {
		return pMethodType;
	}
	
	public ParserRule getMethodTypeRule() {
		return getMethodTypeAccess().getRule();
	}
	
	//CreateMethod:
	//	{CreateMethod} "CREATE" withEntity+=CreateMethodWith* exclude=CreateMethodExclude?;
	public CreateMethodElements getCreateMethodAccess() {
		return pCreateMethod;
	}
	
	public ParserRule getCreateMethodRule() {
		return getCreateMethodAccess().getRule();
	}
	
	//CreateMethodWith:
	//	"with" reference=Reference;
	public CreateMethodWithElements getCreateMethodWithAccess() {
		return pCreateMethodWith;
	}
	
	public ParserRule getCreateMethodWithRule() {
		return getCreateMethodWithAccess().getRule();
	}
	
	//CreateMethodExclude:
	//	"exclude" attributes+=[Attribute] ("," attributes+=[Attribute])*;
	public CreateMethodExcludeElements getCreateMethodExcludeAccess() {
		return pCreateMethodExclude;
	}
	
	public ParserRule getCreateMethodExcludeRule() {
		return getCreateMethodExcludeAccess().getRule();
	}
	
	//GetMethod:
	//	"GET" "on" entityId=[Attribute];
	public GetMethodElements getGetMethodAccess() {
		return pGetMethod;
	}
	
	public ParserRule getGetMethodRule() {
		return getGetMethodAccess().getRule();
	}
	
	//ListMethod:
	//	{ListMethod} "LIST";
	public ListMethodElements getListMethodAccess() {
		return pListMethod;
	}
	
	public ParserRule getListMethodRule() {
		return getListMethodAccess().getRule();
	}
	
	//UpdateMethod:
	//	"UPDATE" "on" entityId=[Attribute] "with" attributes+=[Attribute] ("," attributes+=[Attribute])*;
	public UpdateMethodElements getUpdateMethodAccess() {
		return pUpdateMethod;
	}
	
	public ParserRule getUpdateMethodRule() {
		return getUpdateMethodAccess().getRule();
	}
	
	//DeleteMethod:
	//	"DELETE" "on" entityId=[Attribute];
	public DeleteMethodElements getDeleteMethodAccess() {
		return pDeleteMethod;
	}
	
	public ParserRule getDeleteMethodRule() {
		return getDeleteMethodAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
