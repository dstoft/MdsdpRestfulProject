/**
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.restful.scoping;

import com.google.common.base.Objects;
import java.util.ArrayList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import sdu.mdsd.restful.restControllerGeneration.Attribute;
import sdu.mdsd.restful.restControllerGeneration.Controller;
import sdu.mdsd.restful.restControllerGeneration.CreateMethodExclude;
import sdu.mdsd.restful.restControllerGeneration.CreateMethodWith;
import sdu.mdsd.restful.restControllerGeneration.DeleteMethod;
import sdu.mdsd.restful.restControllerGeneration.GetMethod;
import sdu.mdsd.restful.restControllerGeneration.RestControllerGenerationPackage;
import sdu.mdsd.restful.restControllerGeneration.UpdateMethod;
import sdu.mdsd.restful.scoping.AbstractRestControllerGenerationScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class RestControllerGenerationScopeProvider extends AbstractRestControllerGenerationScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (context instanceof CreateMethodWith) {
      boolean _equals = Objects.equal(reference, RestControllerGenerationPackage.Literals.CREATE_METHOD_WITH__ENTITY_ID);
      if (_equals) {
        _matched=true;
        final ArrayList<Attribute> candidates = new ArrayList<Attribute>();
        candidates.addAll(((CreateMethodWith)context).getEntity().getAttributes());
        return Scopes.scopeFor(candidates);
      }
    }
    if (!_matched) {
      if (context instanceof CreateMethodExclude) {
        _matched=true;
        return Scopes.scopeFor(this.getControllersAttributes(context));
      }
    }
    if (!_matched) {
      if (context instanceof GetMethod) {
        _matched=true;
        return Scopes.scopeFor(this.getControllersAttributes(context));
      }
    }
    if (!_matched) {
      if (context instanceof UpdateMethod) {
        _matched=true;
        return Scopes.scopeFor(this.getControllersAttributes(context));
      }
    }
    if (!_matched) {
      if (context instanceof DeleteMethod) {
        _matched=true;
        return Scopes.scopeFor(this.getControllersAttributes(context));
      }
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
  
  private ArrayList<Attribute> getControllersAttributes(final EObject context) {
    final ArrayList<Attribute> candidates = new ArrayList<Attribute>();
    Controller controller = EcoreUtil2.<Controller>getContainerOfType(context, Controller.class);
    candidates.addAll(controller.getEntity().getAttributes());
    return candidates;
  }
}
