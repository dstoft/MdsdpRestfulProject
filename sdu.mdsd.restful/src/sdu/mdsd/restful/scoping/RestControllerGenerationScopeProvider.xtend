/*
 * generated by Xtext 2.24.0
 */
package sdu.mdsd.restful.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EObject
import sdu.mdsd.restful.restControllerGeneration.Controller
import sdu.mdsd.restful.restControllerGeneration.Attribute
import java.util.ArrayList
import org.eclipse.xtext.scoping.Scopes
import sdu.mdsd.restful.restControllerGeneration.GetMethod
import org.eclipse.xtext.EcoreUtil2
import sdu.mdsd.restful.restControllerGeneration.CreateMethodExclude
import sdu.mdsd.restful.restControllerGeneration.UpdateMethod
import sdu.mdsd.restful.restControllerGeneration.DeleteMethod
import sdu.mdsd.restful.restControllerGeneration.RestControllerGenerationPackage.Literals
import sdu.mdsd.restful.restControllerGeneration.EntityModel
import sdu.mdsd.restful.restControllerGeneration.ExternalDef
import sdu.mdsd.restful.restControllerGeneration.ExternalUse
import sdu.mdsd.restful.restControllerGeneration.Entity
import static sdu.mdsd.restful.generator.RestControllerGenerationGenerator.getAllAttributesStatic
import sdu.mdsd.restful.restControllerGeneration.Name
import sdu.mdsd.restful.restControllerGeneration.ExternalUseOfAttribute
import sdu.mdsd.restful.restControllerGeneration.AttributeType
import sdu.mdsd.restful.restControllerGeneration.SimpleType
import sdu.mdsd.restful.restControllerGeneration.RefType
import sdu.mdsd.restful.restControllerGeneration.ListType
import sdu.mdsd.restful.restControllerGeneration.Reference
import sdu.mdsd.restful.restControllerGeneration.AttributeUse

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class RestControllerGenerationScopeProvider extends AbstractRestControllerGenerationScopeProvider {

	override getScope(EObject context, EReference reference) {
		switch context {
			ExternalUse: {
				val EntityModel model = EcoreUtil2.getContainerOfType(context, EntityModel)
				val Attribute attribute = EcoreUtil2.getContainerOfType(context, Attribute)
				val candidates = new ArrayList<ExternalDef>
				candidates.addAll(model.declarations.filter(ExternalDef).filter[compareAttributeType(type, attribute.type)])
				return Scopes.scopeFor(candidates)
			}
			AttributeUse: {
				val ExternalUseOfAttribute externalUse = EcoreUtil2.getContainerOfType(context, ExternalUseOfAttribute)
				val ExternalDef externalDef = externalUse.external
				val Entity entity = EcoreUtil2.getContainerOfType(context, Entity)
				val candidates = new ArrayList<Attribute>
				candidates.addAll(getAllAttributesStatic(entity).filter[compareAttributeType(type, externalDef.type)])
				return Scopes.scopeFor(candidates)
			}
			CreateMethodExclude: {
				return Scopes.scopeFor(getControllersAttributes(context))
			}
			GetMethod: {
				return Scopes.scopeFor(getControllersAttributes(context))
			}
			UpdateMethod: {
				return Scopes.scopeFor(getControllersAttributes(context))
			}
			DeleteMethod: {
				return Scopes.scopeFor(getControllersAttributes(context))
			}
			Name: {
				val Entity entity = EcoreUtil2.getContainerOfType(context, Entity)
				return Scopes.scopeFor(getAllAttributesStatic(entity))
			}
			Reference case reference == Literals.REFERENCE__REFERENCE: {
				val Controller controller = EcoreUtil2.getContainerOfType(context, Controller)
				var Entity entity
				if(controller !== null) {
					entity = controller.entity
				} else {
					entity = EcoreUtil2.getContainerOfType(context, Entity)
				}
				val candidates = getAllAttributesStatic(entity).filter[type instanceof RefType || type instanceof ListType]
				return Scopes.scopeFor(candidates)
			}
			Reference case reference == Literals.REFERENCE__ATTRIBUTE: {
				if(context === null || context.reference === null || context.reference.type === null) {
					Scopes.scopeFor(new ArrayList<Attribute>)
				}
				Scopes.scopeFor(getAllAttributesStatic(context.reference.type.getReferenceAttributeEntity))
			}
			default: super.getScope(context, reference)
		}
	}
	
	def private getControllersAttributes(EObject context) {
		val candidates = new ArrayList<Attribute>
		var Controller controller = EcoreUtil2.getContainerOfType(context, Controller)
		candidates.addAll(getAllAttributesStatic(controller.entity))
		return candidates
	}
	
	def private boolean compareAttributeType(AttributeType type, AttributeType other) {
		if(type === null) return false
		if(other === null) return false
		if(type.class != other.class) return false
		
		switch type {
			SimpleType: {
				val type2 = other as SimpleType
				type.type.name == type2.type.name
			}
			RefType: {
				val type2 = other as RefType
				type.type.name == type2.type.name
			}
			ListType: {
				val type2 = other as ListType
				type.type.name == type2.type.name
			}
			default: false
		}
	}
	
	def dispatch private getReferenceAttributeEntity(RefType type) { type.type }
	def dispatch private getReferenceAttributeEntity(ListType type) { type.type }

}
